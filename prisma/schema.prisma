generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String                 @unique
  name              String?
  password          String
  role              UserRole               @default(USER)
  isActive          Boolean                @default(true)
  organizationId    String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  centreId          String?                @default("")
  centrePermissions UserCentrePermission[]
  pagePermissions   UserPagePermission[]
  organizations     Organization?          @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  @@map("users")
}

model UserCentrePermission {
  id                 String   @id @default(cuid())
  userId             String   @db.Uuid
  centreId           String
  canViewOccupancy   Boolean  @default(true)
  canEditOccupancy   Boolean  @default(false)
  canViewFinancials  Boolean  @default(false)
  canEditFinancials  Boolean  @default(false)
  canViewEnrollments Boolean  @default(true)
  canEditEnrollments Boolean  @default(false)
  canViewReports     Boolean  @default(true)
  canManageStaff     Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  centre             Centre   @relation(fields: [centreId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_centre_permissions_userid_fkey")

  @@unique([userId, centreId])
  @@map("user_centre_permissions")
}

model Organization {
  id         String      @id @default(cuid())
  name       String
  slug       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  centres    Centre[]
  users      User[]
  xeroConfig XeroConfig?

  @@map("organizations")
}

model Centre {
  id                     String                 @id @default(cuid())
  name                   String
  code                   String                 @unique
  address                String?
  phone                  String?
  capacity               Int?
  organizationId         String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  centreId               String?                @default("")
  tenantid               String?
  overdueInvoicesAmount  Decimal?               @db.Decimal(10, 2)
  discoverApiId          String?                @db.Uuid
  centreBudgetCategories CentreBudgetCategory[]
  organization           Organization           @relation(fields: [organizationId], references: [id])
  occupancyData          OccupancyData[]
  staffHours             StaffHours[]
  userPermissions        UserCentrePermission[]

  @@map("centres")
}

model OccupancyData {
  id              String   @id @default(cuid())
  centreId        String
  date            DateTime
  u2Count         Int
  o2Count         Int
  totalCount      Int
  currentChildren Int      @default(0)
  futureChildren  Int      @default(0)
  waitingChildren Int      @default(0)
  enquiryChildren Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  centre          Centre   @relation(fields: [centreId], references: [id])

  @@unique([centreId, date])
  @@map("occupancy_data")
}

model StaffHours {
  id          String    @id @default(cuid())
  centreId    String
  weekStart   DateTime
  weekEnd     DateTime
  staffType   StaffType
  hoursWorked Float
  hoursPaid   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  centre      Centre    @relation(fields: [centreId], references: [id])

  @@unique([centreId, weekStart, staffType])
  @@map("staff_hours")
}

model ImportLog {
  id               String     @id @default(cuid())
  fileName         String
  importType       ImportType
  recordsProcessed Int
  recordsSuccess   Int
  recordsErrors    Int
  errorDetails     Json?
  createdAt        DateTime   @default(now())

  @@map("import_logs")
}

model UserPagePermission {
  id           String        @id @default(cuid())
  userId       String        @db.Uuid
  page         DashboardPage
  canAccess    Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  xeroTenantId String?
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_page_permissions_userid_fkey")

  @@unique([userId, page])
  @@map("user_page_permissions")
}

model BudgetCategory {
  id             String                 @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean                @default(true)
  sortOrder      Int                    @default(0)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  actualExpenses ActualExpense[]
  centreBudgets  CentreBudgetCategory[]

  @@map("budget_categories")
}

model CentreBudgetCategory {
  id              String          @id @default(cuid())
  centreId        String
  categoryId      String
  xeroAccountCode String?
  xeroAccountName String?
  monthlyBudget   Decimal         @db.Decimal(10, 2)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  year            Int?            @default(2025)
  xerotenantid    String?
  expenses        ActualExpense[]
  category        BudgetCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  centre          Centre          @relation(fields: [centreId], references: [id], onDelete: Cascade)

  @@unique([centreId, categoryId])
  @@map("centre_budget_categories")
}

model ActualExpense {
  id                     String               @id @default(cuid())
  centreBudgetCategoryId String
  year                   Int
  month                  Int
  xeroTransactionId      String?              @unique
  actualAmount           Decimal              @db.Decimal(10, 2)
  xeroSyncDate           DateTime?
  categoryId             String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  category               BudgetCategory       @relation(fields: [categoryId], references: [id])
  centreBudgetCategory   CentreBudgetCategory @relation(fields: [centreBudgetCategoryId], references: [id], onDelete: Cascade)

  @@unique([centreBudgetCategoryId, year, month])
  @@map("actual_expenses")
}

model XeroConfig {
  id              String        @id @default(cuid())
  organizationId  String        @unique
  xeroTenantId    String?
  accessToken     String?
  refreshToken    String?
  tokenExpiry     DateTime?
  lastSyncDate    DateTime?
  autoSyncEnabled Boolean       @default(false)
  syncFrequency   SyncFrequency @default(DAILY)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("xero_config")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model xero_connections {
  id            String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id     String    @unique(map: "xero_connections_tenant_id_unique")
  access_token  String?
  refresh_token String?
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  expires_at    DateTime? @db.Timestamptz(6)
  tenant_name   String?

  @@id([id, tenant_id])
}

enum UserRole {
  MASTER
  ADMIN
  USER
}

enum StaffType {
  QUALIFIED
  UNQUALIFIED
  ADMIN
  CASUAL
}

enum ImportType {
  OCCUPANCY
  STAFF_HOURS
  CENTRES
}

enum DashboardPage {
  DASHBOARD
  XERO
  MARKETING
  DATA_MANAGEMENT
  ADMIN
  ASSISTANT
}

enum SyncFrequency {
  HOURLY
  DAILY
  WEEKLY
}
